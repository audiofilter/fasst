#!/usr/bin/python

from __future__ import division
import numpy as np
import os, sys
import wave

# Import the fasst package
fasst_python_dir = '@FASST_PYTHON_DIR@'
if fasst_python_dir not in sys.path:
    sys.path.insert(0, fasst_python_dir)
import fasst

# Read audio file to know its size
script_path = os.path.dirname(os.path.abspath(__file__))
audio_fname = os.path.join(script_path, 'Shannon_Hurley__Sunrise__inst__mix.wav')
fid = wave.open(audio_fname)
I = fid.getnchannels()
nsampl = fid.getnframes()

# Compute STFT spectrogram size
wlen = 1024
F = wlen/2 + 1
N = np.ceil(nsampl/wlen*2)

# Define sources
J = 3 # Number of sources
K = 4 # NMF rank
sources = []
for j in range(J):
    source = {}
    source['A'] = {}
    source['A']['adaptability'] = 'free'
    source['A']['mixingType'] = 'inst'
    source['Wex'] = {}
    source['Wex']['adaptability'] = 'free'
    source['Wex']['data'] = 0.75 * abs(np.random.randn(F, K)) + 0.25 * np.ones((F, K))
    source['Hex'] = {}
    source['Hex']['data'] = 0.75 * abs(np.random.randn(K, N)) + 0.25 * np.ones((K, N))
    source['Hex']['adaptability'] = 'free'
    sources.append(source)
sources[0]['A']['data'] = np.array(([np.sin(np.pi/8)],[np.cos(np.pi/8)]))
sources[1]['A']['data'] = np.array(([np.sin(np.pi/4)],[np.cos(np.pi/4)]))
sources[2]['A']['data'] = np.array(([np.sin(3*np.pi/8)],[np.cos(3*np.pi/8)]))
sources[0]['name'] = 'first'
sources[1]['name'] = 'second'
sources[2]['name'] = 'third'

for j in range(J):
	sources[j]['wiener'] = {}
	sources[j]['wiener']['a'] = 0 # Default = 0 (dB)
	sources[j]['wiener']['b'] = 0 # Default = 0 (Positive float)
	sources[j]['wiener']['c1'] = 0 # Default = 0 (Positive integer)
	sources[j]['wiener']['c2'] = 0 # Default = 0 (Positive integer)
	sources[j]['wiener']['d'] = float("-inf") # Default = -Inf (dB)



# Define data structure
data = {}
data['iterations'] = 200
data['wlen'] = wlen
data['sources'] = sources

# Write to XML
xml_fname = 'sources.xml'
fasst.writeXML(xml_fname, data)

print 'Input time-frequency representation'
fasst.compute_mixture_covariance_matrix(audio_fname, xml_fname, 'Rx.bin')

# Run EM algorithm
fasst.estimate_source_parameters(xml_fname, 'Rx.bin', xml_fname + '.new')

print 'Computation of the spatial source images'
fasst.estimate_sources(audio_fname, xml_fname + '.new', os.path.join(script_path, 'result'))
